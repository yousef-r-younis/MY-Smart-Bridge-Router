#!/bin/sh
# -----------------------------
# Improved WiFi connect script with faster connection detection - OpenWRT CGI
# -----------------------------
set -e

# URL decode function
urldecode() {
    local data
    data=$(echo -n "$1" | sed 's/+/ /g;s/%/\\x/g')
    printf '%b' "$data"
}

# Read POST data
if [ "$REQUEST_METHOD" = "POST" ]; then
    POST_DATA=$(cat)
else
    POST_DATA="$QUERY_STRING"
fi

# Extract SSID and PASSWORD
SSID=$(echo "$POST_DATA" | awk -F '&' '{for(i=1;i<=NF;i++){if($i~/^ssid=/){sub(/^ssid=/,"",$i);print $i}}}')
PASSWORD=$(echo "$POST_DATA" | awk -F '&' '{for(i=1;i<=NF;i++){if($i~/^password=/){sub(/^password=/,"",$i);print $i}}}')
SSID=$(urldecode "$SSID")
PASSWORD=$(urldecode "$PASSWORD")

# Debug logging
echo "Debug: Received SSID='$SSID', PASSWORD='$PASSWORD'" >> /tmp/wifi_debug.log

# HTTP header
echo "Content-type: text/plain"
echo ""

# Validate SSID
if [ -z "$SSID" ]; then
    echo "Error: SSID is required"
    exit 1
fi

# Determine encryption
if [ -z "$PASSWORD" ]; then
    ENCRYPTION="none"
else
    ENCRYPTION="psk2"
fi

# Function to find the correct STA interface
find_sta_interface() {
    # Look for both phy0-sta0 and phy1-sta0, prioritize phy0
    for phy in phy0 phy1; do
        local iface="${phy}-sta0"
        if iw dev | grep -q "Interface $iface"; then
            echo "$iface"
            return 0
        fi
    done

    # Fallback: find any STA interface
    local sta_iface
    sta_iface=$(iw dev | awk '/Interface/ { iface=$2 } /type managed/ { print iface; exit }')
    if [ -n "$sta_iface" ]; then
        echo "$sta_iface"
        return 0
    fi

    return 1
}

# Function to check if interface is connected to AP
check_sta_connection() {
    local iface="$1"
    if [ -z "$iface" ]; then
        return 1
    fi

    # Check if interface exists and get link status
    local link_output
    link_output=$(iw dev "$iface" link 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "Debug: iw command failed for $iface" >> /tmp/wifi_debug.log
        return 1
    fi

    # Check if connected (look for "Connected to" or just check if SSID is present)
    if echo "$link_output" | grep -q "Connected to\|SSID:"; then
        return 0
    fi

    return 1
}

# Function to restore original WiFi settings
restore_original_wifi() {
    echo "Restoring previous WiFi configuration..."
    echo "Debug: Restoring to SSID='$ORIGINAL_SSID', encryption='$ORIGINAL_ENCRYPTION'" >> /tmp/wifi_debug.log

    if [ -n "$ORIGINAL_SSID" ]; then
        uci set wireless.wifinet3.ssid="$ORIGINAL_SSID"
    fi

    uci set wireless.wifinet3.encryption="$ORIGINAL_ENCRYPTION"

    # Clear any existing key first
    uci delete wireless.wifinet3.key 2>/dev/null || true

    # Set key if original had one
    if [ "$ORIGINAL_ENCRYPTION" != "none" ] && [ -n "$ORIGINAL_KEY" ]; then
        uci set wireless.wifinet3.key="$ORIGINAL_KEY"
    fi

    uci commit wireless
    wifi reload
    sleep 5  # Wait for previous connection to restore
}


check_wan_status() {
    # Try common WAN interface names, prioritizing wwan since STA uses network='wwan'
    for wan_name in wwan wan wan6; do
        local wan_status
        wan_status=$(ubus call network.interface.$wan_name status 2>/dev/null)

        if [ $? -eq 0 ]; then
            echo "Debug: Found WAN interface '$wan_name'" >> /tmp/wifi_debug.log

            # Check if interface is up and has IP
            if echo "$wan_status" | grep -q '"up": *true'; then
                if echo "$wan_status" | grep -q '"ipv4-address"' || echo "$wan_status" | grep -q '"ipv6-address"'; then
                    echo "Debug: WAN interface '$wan_name' is up with IP" >> /tmp/wifi_debug.log
                    return 0
                else
                    echo "Debug: WAN interface '$wan_name' is up but no IP yet" >> /tmp/wifi_debug.log
                fi
            else
                echo "Debug: WAN interface '$wan_name' is not up" >> /tmp/wifi_debug.log
            fi
        fi
    done

    return 1
}

# Backup current wireless settings
ORIGINAL_SSID=$(uci get wireless.wifinet3.ssid 2>/dev/null || echo "")
ORIGINAL_ENCRYPTION=$(uci get wireless.wifinet3.encryption 2>/dev/null || echo "none")
ORIGINAL_KEY=$(uci get wireless.wifinet3.key 2>/dev/null || echo "")

echo "Debug: Backing up - SSID='$ORIGINAL_SSID', encryption='$ORIGINAL_ENCRYPTION'" >> /tmp/wifi_debug.log

# Apply new settings temporarily (not committing yet)
uci set wireless.wifinet3.ssid="$SSID"
uci set wireless.wifinet3.encryption="$ENCRYPTION"
uci delete wireless.wifinet3.key 2>/dev/null || true

if [ "$ENCRYPTION" != "none" ]; then
    uci set wireless.wifinet3.key="$PASSWORD"
fi

# Reload Wi-Fi (non-blocking)
wifi reload

echo "Attempting to connect to $SSID..."

# Wait for initial connection attempt
sleep 5

# Check connection - single attempt approach
STA_IFACE=$(find_sta_interface)

if [ -n "$STA_IFACE" ]; then
    echo "Found STA interface: $STA_IFACE"

    LINK_STATUS=$(iw dev "$STA_IFACE" link 2>/dev/null || echo "No link info")
    echo "Link status: $LINK_STATUS"
    echo "Debug: Link status - $LINK_STATUS" >> /tmp/wifi_debug.log

    if check_sta_connection "$STA_IFACE"; then
        echo "STA connected to AP, checking stability..."
        echo "Debug: Initial STA connection successful" >> /tmp/wifi_debug.log

        # Wait for DHCP and network setup
        sleep 5

        # Check if still connected (connection drop indicates auth failure)
        if check_sta_connection "$STA_IFACE"; then
            echo "Connection stable, checking WAN interface..."

            # Check WAN status
            if check_wan_status; then
                # Success!
                uci commit wireless
                echo "Successfully connected to $SSID with internet access!"
                echo "Debug: Connection successful, config committed" >> /tmp/wifi_debug.log
                exit 0
            else
                echo "Connected but no internet access yet. Checking DHCP..."
                echo "Debug: Connected but no WAN interface yet" >> /tmp/wifi_debug.log

                # Give DHCP more time for slow networks
                sleep 5
                if check_wan_status; then
                    uci commit wireless
                    echo "Successfully connected to $SSID (slow DHCP resolved)!"
                    echo "Debug: Connection successful after DHCP delay" >> /tmp/wifi_debug.log
                    exit 0
                else
                    echo "Debug: Still no WAN interface after extended wait" >> /tmp/wifi_debug.log
                fi
            fi
        else
            echo "Debug: Connection dropped after initial success - likely auth failure" >> /tmp/wifi_debug.log
        fi

        # Connection dropped or no internet - likely wrong password
        restore_original_wifi
        echo "Error: Connected briefly but dropped or no internet. Check password."
        echo "Debug: Connection failed, original settings restored" >> /tmp/wifi_debug.log
        exit 1
    else
        echo "STA not connected to AP"
        echo "Debug: No STA connection established" >> /tmp/wifi_debug.log
    fi
else
    echo "No STA interface found"
    echo "Available interfaces:"
    iw dev | grep "Interface"
    echo "Debug: No STA interface found" >> /tmp/wifi_debug.log
fi

# Never connected or connection failed
restore_original_wifi
echo "Error: Cannot connect to $SSID. Check SSID and password."
echo "Debug: Connection completely failed, original settings restored" >> /tmp/wifi_debug.log
exit 1