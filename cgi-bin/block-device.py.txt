#!/usr/bin/env python3

import json
import subprocess
import sys
import os
import re

def safe_output(data):
    """Output JSON with headers"""
    print("Content-Type: application/json")
    print("Access-Control-Allow-Origin: *")
    print()
    print(json.dumps(data))

def validate_mac(mac_address):
    """Validate MAC address format"""
    mac_pattern = r'^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$'
    return re.match(mac_pattern, mac_address) is not None

def get_mac_address():
    """Get MAC address from query string or POST data"""
    # Try query string first (format: ?mac=aa:bb:cc:dd:ee:ff)
    query_string = os.environ.get('QUERY_STRING', '')
    if query_string:
        for param in query_string.split('&'):
            if param.startswith('mac='):
                return param.split('=', 1)[1]

    # Try POST data
    if os.environ.get('REQUEST_METHOD') == 'POST':
        try:
            content_length = int(os.environ.get('CONTENT_LENGTH', 0))
            if content_length > 0:
                post_data = sys.stdin.read(content_length)
                json_data = json.loads(post_data)
                return json_data.get('deviceId')  # Your JS sends 'deviceId'
        except:
            pass

    return None

def run_uci_command(command):
    """Run a UCI command and return success status"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stderr.strip()

def get_wifi_interfaces():
    """Get list of wifi interfaces that are access points"""
    success, output = run_uci_command("uci show wireless | grep '.mode=' | grep 'ap'")
    if not success:
        return []

    interfaces = []
    for line in output.split('\n'):
        if line.strip():
            # Extract interface name from wireless.interface_name.mode='ap'
            interface = line.split('.')[1]
            interfaces.append(interface)

    return interfaces

def is_mac_already_blocked(mac_address):
    """Check if MAC address is already in any maclist"""
    success, output = run_uci_command("uci show wireless | grep maclist")
    if not success:
        return False

    return mac_address.lower() in output.lower()

def block_device(mac_address):
    """Block device by MAC address - prevents connection AND internet access"""
    try:
        # Check if already blocked
        if is_mac_already_blocked(mac_address):
            return {
                "success": True,
                "message": f"Device {mac_address} is already blocked",
                "details": "Device was previously blocked"
            }

        # Step 1: Add firewall rule to block internet access
        success, output = run_uci_command("uci add firewall rule")
        if not success:
            return {"success": False, "error": f"Failed to add firewall rule: {output}"}

        # Configure firewall rule for internet blocking
        rule_name = f"Block_{mac_address.replace(':', '_')}"
        commands = [
            f'uci set firewall.@rule[-1].name="{rule_name}"',
            'uci set firewall.@rule[-1].src="lan"',
            'uci set firewall.@rule[-1].dest="*"',
            'uci set firewall.@rule[-1].proto="all"',
            f'uci set firewall.@rule[-1].src_mac="{mac_address}"',
            'uci set firewall.@rule[-1].target="REJECT"'
        ]

        for cmd in commands:
            success, output = run_uci_command(cmd)
            if not success:
                return {"success": False, "error": f"Failed to configure firewall rule: {output}"}

        # Step 2: Add MAC filter to WiFi interfaces
        wifi_interfaces = get_wifi_interfaces()

        for interface in wifi_interfaces:
            # Check if macfilter is already set to deny
            success, current_filter = run_uci_command(f"uci get wireless.{interface}.macfilter")
            if not success or current_filter != "deny":
                # Set macfilter to deny
                run_uci_command(f'uci set wireless.{interface}.macfilter="deny"')

            # Add MAC to the deny list
            run_uci_command(f'uci add_list wireless.{interface}.maclist="{mac_address}"')

        # Step 3: Commit all changes
        commit_commands = ["uci commit firewall", "uci commit wireless"]
        for cmd in commit_commands:
            success, output = run_uci_command(cmd)
            if not success:
                return {"success": False, "error": f"Failed to commit changes: {output}"}

        # Step 4: Restart firewall only
        try:
            subprocess.run("/etc/init.d/firewall restart", shell=True, check=True)
        except subprocess.CalledProcessError as e:
            return {"success": False, "error": f"Failed to restart firewall: {str(e)}"}

        # Step 5: Reload wireless configuration without full restart
        try:
            subprocess.run("wifi reload", shell=True, check=True)
        except subprocess.CalledProcessError:
            # If wifi reload fails, try restarting wireless service
            try:
                subprocess.run("/etc/init.d/network restart", shell=True, check=True)
            except subprocess.CalledProcessError as e:
                return {"success": False, "error": f"Failed to reload wireless: {str(e)}"}

        # Step 6: Disconnect the device if currently connected
        try:
            # Try to kick the device off using hostapd (if available)
            subprocess.run(f'hostapd_cli -i wlan0 disassociate {mac_address}', shell=True, check=False)
            subprocess.run(f'hostapd_cli -i wlan1 disassociate {mac_address}', shell=True, check=False)
        except:
            pass

        return {
            "success": True,
            "message": f"Device {mac_address} has been completely blocked",
            "details": f"Device blocked from WiFi connection and internet access on {len(wifi_interfaces)} interface(s)"
        }

    except Exception as e:
        return {"success": False, "error": str(e)}

def main():
    try:
        mac_address = get_mac_address()

        if not mac_address:
            safe_output({"success": False, "error": "MAC address required"})
            return

        if not validate_mac(mac_address):
            safe_output({"success": False, "error": f"Invalid MAC address format: {mac_address}"})
            return

        result = block_device(mac_address)
        safe_output(result)

    except Exception as e:
        safe_output({"success": False, "error": str(e)})

if __name__ == "__main__":
    main()