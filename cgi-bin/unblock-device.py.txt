#!/usr/bin/env python3

import json
import subprocess
import sys
import os
import re

def safe_output(data):
    """Output JSON with headers"""
    print("Content-Type: application/json")
    print("Access-Control-Allow-Origin: *")
    print()
    print(json.dumps(data))

def validate_mac(mac_address):
    """Validate MAC address format"""
    mac_pattern = r'^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$'
    return re.match(mac_pattern, mac_address) is not None

def get_mac_address():
    """Get MAC address from query string or POST data"""
    # Try query string first (format: ?mac=aa:bb:cc:dd:ee:ff)
    query_string = os.environ.get('QUERY_STRING', '')
    if query_string:
        for param in query_string.split('&'):
            if param.startswith('mac='):
                return param.split('=', 1)[1]

    # Try POST data
    if os.environ.get('REQUEST_METHOD') == 'POST':
        try:
            content_length = int(os.environ.get('CONTENT_LENGTH', 0))
            if content_length > 0:
                post_data = sys.stdin.read(content_length)
                json_data = json.loads(post_data)
                return json_data.get('deviceId')  # Your JS sends 'deviceId'
        except:
            pass

    return None

def run_uci_command(command):
    """Run a UCI command and return success status"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stderr.strip()

def unblock_device(mac_address):
    """Unblock device by MAC address - removes firewall rules and MAC filters"""
    try:
        removed_count = 0
        firewall_rules_removed = 0
        wireless_rules_removed = 0

        # Step 1: Remove firewall rules that block this MAC
        rule_name = f"Block_{mac_address.replace(':', '_')}"

        # Get all firewall rules
        success, output = run_uci_command("uci show firewall | grep rule")
        if success and output:
            lines = output.strip().split('\n')
            rules_to_delete = []

            # First pass: identify rules to delete
            for line in lines:
                if f"name='{rule_name}'" in line or f'src_mac="{mac_address}"' in line:
                    # Extract rule index (e.g., firewall.@rule[2].name -> @rule[2])
                    if '.@rule[' in line:
                        try:
                            rule_section = line.split('.')[1].split('.')[0]  # Get @rule[X]
                            if rule_section not in rules_to_delete:
                                rules_to_delete.append(rule_section)
                        except:
                            pass

            # Second pass: delete rules (in reverse order to maintain indices)
            for rule_section in reversed(sorted(rules_to_delete)):
                success, _ = run_uci_command(f"uci delete firewall.{rule_section}")
                if success:
                    firewall_rules_removed += 1

        # Step 2: Remove from wireless MAC filter deny list
        success, output = run_uci_command("uci show wireless | grep maclist")
        if success and output:
            lines = output.strip().split('\n')
            for line in lines:
                if mac_address in line:
                    try:
                        # Extract the config section
                        config_section = line.split('=')[0]  # Get wireless.interface.maclist
                        # Remove this specific MAC from the list
                        success, _ = run_uci_command(f"uci del_list {config_section}='{mac_address}'")
                        if success:
                            wireless_rules_removed += 1
                    except:
                        pass

        removed_count = firewall_rules_removed + wireless_rules_removed

        # Step 3: Commit all changes
        commit_commands = ["uci commit firewall", "uci commit wireless"]
        for cmd in commit_commands:
            run_uci_command(cmd)

        # Step 4: Restart firewall and reload wireless configuration
        try:
            subprocess.run("/etc/init.d/firewall restart", shell=True, check=True)
        except subprocess.CalledProcessError as e:
            return {"success": False, "error": f"Failed to restart firewall: {str(e)}"}

        # Step 5: Reload wireless configuration without full restart
        try:
            subprocess.run("wifi reload", shell=True, check=True)
        except subprocess.CalledProcessError:
            # If wifi reload fails, try restarting wireless service
            try:
                subprocess.run("/etc/init.d/network restart", shell=True, check=True)
            except subprocess.CalledProcessError as e:
                return {"success": False, "error": f"Failed to reload wireless: {str(e)}"}

        if removed_count > 0:
            return {
                "success": True,
                "message": f"Device {mac_address} has been unblocked",
                "details": f"Removed {firewall_rules_removed} firewall rule(s) and {wireless_rules_removed} wireless filter(s)",
                "mac_address": mac_address
            }
        else:
            return {
                "success": True,
                "message": f"Device {mac_address} was not blocked or already unblocked",
                "details": "No blocking rules found to remove",
                "mac_address": mac_address
            }

    except Exception as e:
        return {"success": False, "error": str(e)}

def main():
    try:
        mac_address = get_mac_address()

        if not mac_address:
            safe_output({"success": False, "error": "MAC address required"})
            return

        if not validate_mac(mac_address):
            safe_output({"success": False, "error": f"Invalid MAC address format: {mac_address}"})
            return

        result = unblock_device(mac_address)
        safe_output(result)

    except Exception as e:
        safe_output({"success": False, "error": str(e)})

if __name__ == "__main__":
    main()